#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class TableMeta
{ //元数据包括：表名、列名、主键、表文件存储路径等
private:
	string tb_savePath;
	string tb_metaFileName;
	string tb_metaFilePath;
public:
	//查看指定数据库的表的元数据 
	TableMeta(string databaseName)
	{
		tb_savePath = "C:/Users/1/Desktop/MyDatabase/" + databaseName + "/";
		tb_metaFileName = "tableMeta.json";
		tb_metaFilePath = tb_savePath  + tb_metaFileName;
	}
	
	//加载表名 
	void load()
	{
		Json::Reader reader;
		Json::Value root;
		
		ifstream in(tb_metaFilePath);
	 
		if (!in)
		{
			cout << "Error opening file\n";
			return;
		}
		if (reader.parse(in, root))
		{
			cout << "Table name are: " << endl;
			for (int i = 0; i<root.size(); i++)
			{
				string c = root[i]["tableName"].asString();
				cout << c << '\t';
			}
			cout << endl;
			cout << "load Complete!" << endl;
		}
		else {cout << "parse error\n" << endl;}
		in.close();
	}
	
	//每次保存一个表的meta
	void save(string tableName)
	{	
		Json::Reader reader;
    	Json::Value root;
		Json::StyledWriter writer;
	    Json::Value table;
	    
	    //如果文件已存在，则数据会被解析到root(这样就能在末尾写入数据) 
		ifstream in(tb_metaFilePath);
//		if (in)
////		{	 
//			if (!reader.parse(in, root))
//			{
//				cout << "parse error\n" << endl;
//			}
//			in.close();
//		}
		reader.parse(in, root);
		in.close();
		
		//如果表已经存在则不创建 
		for(int i=0; i<root.size(); i++)
		{
			if(root[i]["tableName"]==tableName)
			{
				cout<<"this table already exists."<<endl; 
				return;  
			}
		}
		
		string str;
		string table_path;
		
		//表名 
		table["tableName"] = tableName;
		
		//表存储路径
		table_path = tb_savePath + tableName + ".bin";
    	table["tablePath"] = table_path;
    	
    	//主键 
    	cout<<"please input the primaryKey: ";
		cin>>str;
    	table["primaryKey"] = str;
    	
    	//列名 
    	cout<<"please input the column name, and end with '#' "<<endl;
    	cout<<"(such as: name age weight #)"<<endl;
    	cout<<"input column name: ";
		while(1)
		{
			cin>>str;
			if(str=="#") {break;}
			table["colName"].append(str);
		}
    	
    	root.append(table);
    	
    	ofstream out(tb_metaFilePath);
    	out << writer.write(root);
    	out.close();
    	cout << "save Complete!" << endl;
    	
    	//建立表的.bin(二进制)文件
    	ofstream outfile(table_path);
		outfile.close();
	}
	
	void drop(string tableName)
	{
		Json::Reader reader;
		Json::StyledWriter writer;
    	Json::Value root1, root2;
    	
    	ifstream in(tb_metaFilePath);
		if (!reader.parse(in, root1))
		{
			cout << "parse error\n" << endl;
			in.close();
			return;
		}
		in.close();
		
		for(int i=0; i<root1.size(); i++)
		{
			if(root1[i]["tableName"]!=tableName)
			{
				root2.append(root1[i]);
			}
		}
		
		ofstream out(tb_metaFilePath);
    	out << writer.write(root2);
    	out.close();
	}
	
	void getTableInfo(string tableName)
	{
		Json::Reader reader;
		Json::Value root;
		
		ifstream in(tb_metaFilePath);
		reader.parse(in, root);
		in.close();
		
		for(int i=0; i<root.size(); i++)
		{
			if(root[i]["tableName"]==tableName)
			{
				cout<<root[i]<<endl;
				return;
			} 
		}
		cout<<"not find such table."<<endl;
	}
	
};
